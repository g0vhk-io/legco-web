{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomNavBar","props","state","members","this","getMembers","fetch","response","json","console","log","setState","bg","Brand","href","align","labelKey","options","placeholder","renderMenuItemChildren","option","width","src","image","name_ch","React","Component","App","className","fluid","to","variant","block","size","List","Item","map","member","style","Body","Title","Subtitle","party","Detail","defaultActiveKey","id","eventKey","title","AppRouter","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,yXCkBrCC,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,QAAS,IAFN,E,iFAMjBC,KAAKC,e,qKAIkBC,MAAM,wC,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OACM,GAENL,EAAUK,EAAK,GAAL,QAChBC,QAAQC,IAAIP,GACZC,KAAKO,SAAS,CAACR,QAAQA,I,oIAIvB,OACE,kBAAC,IAAD,CAAQS,GAAG,SACT,kBAAC,IAAOC,MAAR,CAAcC,KAAK,SAAnB,oDACA,kBAAC,YAAD,CACEC,MAAM,QACNC,SAAS,UACTC,QAASb,KAAKF,MAAMC,QACpBe,YAAY,2BACZC,uBAAwB,SAACC,EAAQnB,GAAT,OAAoB,6BAAK,yBAAKoB,MAAM,KAAKC,IAAK,mBAAqBF,EAAOG,QAAtD,OAAqEH,EAAOI,iB,GA7BzGC,IAAMC,WAsCjC,SAASC,IACP,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACf,kBAAC,EAAD,MACD,kBAAC,IAAD,CAAWC,OAAO,GAChB,kBAAC,IAAD,aACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAK,kBAAC,IAAD,CAAMC,GAAG,WAAU,kBAAC,IAAD,CAAQC,QAAQ,UAAUC,OAAK,EAACC,KAAK,MAArC,wBACxB,kBAAC,IAAD,KAAK,kBAAC,IAAD,CAAMH,GAAG,WAAU,kBAAC,IAAD,CAAQC,QAAQ,YAAYC,OAAK,EAACC,KAAK,MAAvC,yBAE1B,kBAAC,IAAD,aACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAK,kBAAC,IAAD,CAAMH,GAAG,WAAU,kBAAC,IAAD,CAAQC,QAAQ,UAAUC,OAAK,EAACC,KAAK,MAArC,wBACxB,kBAAC,IAAD,KAAK,kBAAC,IAAD,CAAMH,GAAG,WAAU,kBAAC,IAAD,CAAQC,QAAQ,UAAUC,OAAK,EAACC,KAAK,MAArC,yBAE1B,kBAAC,IAAD,aACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAK,kBAAC,IAAD,CAAMH,GAAG,WAAU,kBAAC,IAAD,CAAQC,QAAQ,SAASC,OAAK,EAACC,KAAK,MAApC,kBACxB,kBAAC,IAAD,KAAK,kBAAC,IAAD,CAAMH,GAAG,WAAU,kBAAC,IAAD,CAAQC,QAAQ,OAAOC,OAAK,EAACC,KAAK,MAAlC,sB,IAS9BC,E,YACJ,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,QAAS,IAFN,E,iFAMjBC,KAAKC,e,qKAIkBC,MAAM,wC,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OACM,GAENL,EAAUK,EAAK,GAAL,QAChBC,QAAQC,IAAIP,GACZC,KAAKO,SAAS,CAACR,QAAQA,I,oIAIvB,OACG,6BACG,kBAAC,IAAD,CAAW0B,OAAO,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAWM,KAAZ,KAAiB,kBAAC,IAAD,CAAML,GAAG,KAAT,iBACjB,kBAAC,IAAWK,KAAZ,4BAIJ,6BACG/B,KAAKF,MAAMC,QAAQiC,IAAI,SAAAC,GAAM,OAC5B,kBAAC,IAAD,CAAMP,GAAG,WACT,kBAAC,IAAD,CAAMQ,MAAO,CAAC,QAAU,QACxB,yBAAKA,MAAO,CAAC,QAAW,SAEpB,6BAAK,yBAAKP,QAAQ,UAAUT,IAAK,mBAAqBe,EAAOd,MAAOF,MAAM,QAC1E,6BAAK,kBAAC,IAAKkB,KAAN,KACH,kBAAC,IAAKC,MAAN,KAAaH,EAAOb,SACpB,kBAAC,IAAKiB,SAAN,KAAgBJ,EAAOK,OAASL,EAAOK,MAAMlB,uB,GAvC9CC,IAAMC,WAsDzB,SAASiB,IACP,IAAMN,EAAS,CACb,QAAW,qBACX,MAAS,+BACT,MAAS,CACP,QAAW,+CAGf,OACE,6BACE,kBAAC,IAAD,CAAWR,OAAO,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAWM,KAAZ,KAAiB,kBAAC,IAAD,CAAML,GAAG,KAAT,iBACjB,kBAAC,IAAWK,KAAZ,4BAIJ,6BACI,kBAAC,IAAD,CAAMG,MAAO,CAAC,QAAU,QACxB,yBAAKA,MAAO,CAAC,QAAW,SAEpB,6BAAK,yBAAKP,QAAQ,UAAUT,IAAK,mBAAqBe,EAAOd,MAAOF,MAAM,QAC1E,6BAAK,kBAAC,IAAKkB,KAAN,KACH,kBAAC,IAAKC,MAAN,KAAaH,EAAOb,SACpB,kBAAC,IAAKiB,SAAN,KAAgBJ,EAAOK,OAASL,EAAOK,MAAMlB,aAInD,kBAAC,IAAD,CAAMoB,iBAAiB,OAAOC,GAAG,4BAC/B,kBAAC,IAAD,CAAKC,SAAS,OAAOC,MAAM,iBAE3B,kBAAC,IAAD,CAAKD,SAAS,SAASC,MAAM,iBAE7B,kBAAC,IAAD,CAAKD,SAAS,WAAWC,MAAM,iBAE/B,kBAAC,IAAD,CAAKD,SAAS,OAAOC,MAAM,qBAuBxBC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,UAAUC,OAAK,EAACC,UAAWjB,IACvC,kBAAC,IAAD,CAAOe,KAAK,UAAUC,OAAK,EAACC,UAAWR,OClL3BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6ccab305.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\nimport {Typeahead} from 'react-bootstrap-typeahead'; \nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass CustomNavBar extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {members: []}\n    }\n\n    componentDidMount() {\n      this.getMembers();\n    }\n\n    async getMembers() {\n      const response = await fetch('https://api.g0vhk.io/legco/councils/');\n      const json = await response.json();\n      let party = ''\n      \n      const members = json[0]['members'];\n      console.log(members);\n      this.setState({members:members})\n    }\n\n    render() {\n      return (\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#home\">立法會議員資料庫</Navbar.Brand>\n          <Typeahead\n            align=\"right\"\n            labelKey=\"name_ch\"\n            options={this.state.members}\n            placeholder=\"議員名字\"\n            renderMenuItemChildren={(option, props) => (<div><img width=\"40\" src={\"https://g0vhk.io\" + option.image}/>&nbsp;{option.name_ch}</div>)}\n          />\n        </Navbar>\n        );\n\n    }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {<CustomNavBar />}\n        <Container fluid={true}>\n          <Row>&nbsp;</Row>\n          <Row>\n            <Col><Link to=\"/nteast\"><Button variant=\"primary\" block size=\"lg\">新界東</Button></Link></Col>\n            <Col><Link to=\"/nteast\"><Button variant=\"secondary\" block size=\"lg\">新界西</Button></Link></Col>\n          </Row>\n          <Row>&nbsp;</Row>\n          <Row>\n            <Col><Link to=\"/nteast\"><Button variant=\"success\" block size=\"lg\">九龍東</Button></Link></Col>\n            <Col><Link to=\"/nteast\"><Button variant=\"warning\" block size=\"lg\">九龍西</Button></Link></Col>\n          </Row>\n          <Row>&nbsp;</Row>\n          <Row>\n            <Col><Link to=\"/nteast\"><Button variant=\"danger\" block size=\"lg\">港島</Button></Link></Col>\n            <Col><Link to=\"/nteast\"><Button variant=\"info\" block size=\"lg\">功能</Button></Link></Col>\n          </Row>\n        </Container>\n      </header>\n    </div>\n  );\n}\n\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {members: []}\n  }\n\n  componentDidMount() {\n    this.getMembers();\n  }\n\n  async getMembers() {\n    const response = await fetch('https://api.g0vhk.io/legco/councils/');\n    const json = await response.json();\n    let party = ''\n    \n    const members = json[0]['members'];\n    console.log(members);\n    this.setState({members:members})\n  }\n\n  render() {\n    return (\n       <div>\n          <Container fluid={true}>\n            <Breadcrumb>\n              <Breadcrumb.Item><Link to=\"/\">議員</Link></Breadcrumb.Item>\n              <Breadcrumb.Item>\n                新界東\n              </Breadcrumb.Item>\n            </Breadcrumb>\n          <div>\n            {this.state.members.map(member => \n              <Link to=\"/member\">\n              <Card style={{'padding':'4pt'}}>\n              <div style={{'display': 'flex'}}>\n              \n                  <div><img variant=\"primary\" src={\"https://g0vhk.io\" + member.image} width=\"80\"/></div>\n                  <div><Card.Body>\n                    <Card.Title>{member.name_ch}</Card.Title>\n                    <Card.Subtitle>{member.party && member.party.name_ch}</Card.Subtitle>\n                  </Card.Body></div>\n              </div>\n              </Card>\n              </Link>\n            )}\n          </div>\n          </Container>\n      </div>\n    \n    );\n  }\n}\n\n\nfunction Detail() {\n  const member = {\n    \"name_ch\": \"\\u9ec3\\u570b\\u5065\",\n    \"image\": \"/static/legco/member/wkk.jpg\",\n    \"party\": {\n      \"name_ch\": \"\\u9999\\u6e2f\\u5de5\\u6703\\u806f\\u5408\\u6703\",\n    }\n  };\n  return (\n    <div>\n      <Container fluid={true}>\n        <Breadcrumb>\n          <Breadcrumb.Item><Link to=\"/\">議員</Link></Breadcrumb.Item>\n          <Breadcrumb.Item>\n            新界東\n          </Breadcrumb.Item>\n        </Breadcrumb>\n      <div>\n          <Card style={{'padding':'4pt'}}>\n          <div style={{'display': 'flex'}}>\n          \n              <div><img variant=\"primary\" src={\"https://g0vhk.io\" + member.image} width=\"80\"/></div>\n              <div><Card.Body>\n                <Card.Title>{member.name_ch}</Card.Title>\n                <Card.Subtitle>{member.party && member.party.name_ch}</Card.Subtitle>\n              </Card.Body></div>\n          </div>\n          </Card>\n          <Tabs defaultActiveKey=\"vote\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"vote\" title=\"投票\">\n            </Tab>\n            <Tab eventKey=\"speech\" title=\"發言\">\n            </Tab>\n            <Tab eventKey=\"question\" title=\"質詢\">\n            </Tab>\n            <Tab eventKey=\"news\" title=\"新聞\">\n            </Tab>\n          </Tabs>\n      </div>\n      </Container>\n\n\n    </div>);\n}\n\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div>\n        <Route path=\"/\" exact component={App} />\n        <Route path=\"/nteast\" exact component={List} />\n        <Route path=\"/member\" exact component={Detail} />\n      </div>\n    </Router>    \n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}